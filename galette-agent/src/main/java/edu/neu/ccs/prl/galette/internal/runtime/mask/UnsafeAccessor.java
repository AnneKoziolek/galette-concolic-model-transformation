package edu.neu.ccs.prl.galette.internal.runtime.mask;

import edu.neu.ccs.prl.galette.internal.runtime.Patched;
import java.lang.reflect.Field;
import java.security.ProtectionDomain;

/**
 * Methods in this class are generated by a {@link edu.neu.ccs.prl.galette.internal.patch.Patcher} when
 * the Phosphor agent JAR is built.
 */
@SuppressWarnings("unused")
public final class UnsafeAccessor {
    @Patched
    public static int getInvalidFieldOffset() {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Class<?> defineAnonymousClass(Class<?> hostClass, byte[] data, Object[] cpPatches) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Class<?> defineClass(
            String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain protectionDomain) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static long objectFieldOffset(Field f) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static long staticFieldOffset(Field f) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Object staticFieldBase(Field f) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static int arrayBaseOffset(Class<?> arrayClass) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putBoolean(Object o, long offset, boolean x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putByte(Object o, long offset, byte x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putChar(Object o, long offset, char x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putDouble(Object o, long offset, double x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putFloat(Object o, long offset, float x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putInt(Object o, long offset, int x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putLong(Object o, long offset, long x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putShort(Object o, long offset, short x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putObject(Object o, long offset, Object x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putBooleanVolatile(Object o, long offset, boolean x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putByteVolatile(Object o, long offset, byte x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putCharVolatile(Object o, long offset, char x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putDoubleVolatile(Object o, long offset, double x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putFloatVolatile(Object o, long offset, float x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putIntVolatile(Object o, long offset, int x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putLongVolatile(Object o, long offset, long x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putShortVolatile(Object o, long offset, short x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putObjectVolatile(Object o, long offset, Object x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static boolean getBoolean(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static byte getByte(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static char getChar(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static double getDouble(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static float getFloat(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static int getInt(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static long getLong(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    static short getShort(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Object getObject(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static boolean getBooleanVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static byte getByteVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static char getCharVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static double getDoubleVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static float getFloatVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static int getIntVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static long getLongVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static short getShortVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Object getObjectVolatile(Object o, long offset) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putOrderedInt(Object o, long offset, int x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putOrderedLong(Object o, long offset, long x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static void putOrderedObject(Object o, long offset, Object x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static boolean compareAndSwapInt(Object o, long offset, int expected, int x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static boolean compareAndSwapLong(Object o, long offset, long expected, long x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static boolean compareAndSwapObject(Object o, long offset, Object expected, Object x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static int compareAndExchangeInt(Object o, long offset, int expected, int x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static long compareAndExchangeLong(Object o, long offset, long expected, long x) {
        throw new AssertionError("Placeholder method was called");
    }

    @Patched
    public static Object compareAndExchangeObject(Object o, long offset, Object expected, Object x) {
        throw new AssertionError("Placeholder method was called");
    }
}
