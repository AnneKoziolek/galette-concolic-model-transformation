Run the synthetic benchmark suite with each taint tracking system using each of the JDKs

Synthetic benchmarks were creating using the JUnit 5 (version 5.10.0) Java testing framework.

All synthetic benchmarks are compiled using OpenJDK Temurin (version 17.0.10+7).
We configured \texttt{javac} to generate class files for Java 8 except for the "StringIndyConcat" and "RecordType" groups.
These groups test Java features not available for Java 8 class files.
The "StringIndyConcat" group was compiled to Java 9 class files; this group tests the improved string concatenation introduced in Java 9 which uses the \texttt{invokedynamic} instruction instead \code{java.lang.StringBuilder}~\citep{jep-280}.
The "RecordType" group was compiled to Java 16 class files; this group tests the record types introduced in Java 16~\citep{jep-395}.

For Phosphor we used the options: enum,acmpeq,serialization
JVM options: -ea, -Xmx8G

Did not use Oracle Java it is closed source (8 and 11 downloads require license to be accepted)

./slurm_wrapper.sh neu-se/phosphor2 main galette scripts/evaluate_semantic.sh 1 evaluate_semantic.csv

Last run:
/ci-logs/public/katie/galette/results/slurm-1189075/

Phosphor will crash on:
VarHandleITCase#getAndBitwiseBoolean
VarHandleITCase#compareAndExchangeBoolean
with location
ONE_DIMENSIONAL_ARRAY.getBoolean

* Consider reverting to the distributed MirrorTaint JAR
* Recollect data
* Create table
* Examine root cause of failures for Phosphor and MirrorTaint
* Write up description of results

Add pattern matching
Add additional cases for MethodHandles
Add ternaries